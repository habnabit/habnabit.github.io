<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TRAMP | _habnablog]]></title>
  <link href="http://blog.habnab.it/blog/categories/tramp/atom.xml" rel="self"/>
  <link href="http://blog.habnab.it/"/>
  <updated>2013-07-21T11:42:25-07:00</updated>
  <id>http://blog.habnab.it/</id>
  <author>
    <name><![CDATA[_Harold Abnabit]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[emacsclient and TRAMP]]></title>
    <link href="http://blog.habnab.it/blog/2013/06/25/emacsclient-and-tramp/"/>
    <updated>2013-06-25T07:47:00-07:00</updated>
    <id>http://blog.habnab.it/blog/2013/06/25/emacsclient-and-tramp</id>
    <content type="html"><![CDATA[<p>For quite a while now, I&rsquo;ve done a large amount of my text editing in emacs
over ssh using <a href="http://www.emacswiki.org/emacs/TrampMode">TRAMP</a>. It&rsquo;s <em>extremely</em> convenient to be able to run one
instance of emacs locally instead of spawning an editor remotely and
interacting with it over ssh. I&rsquo;ve tried using <a href="http://fuse.sourceforge.net/sshfs.html">sshfs</a> in the past, but it&rsquo;s
never worked well for me in the general case. But, this isn&rsquo;t a post about
justifying my choices.</p>

<p>The other crucial part of my local emacs setup has been <a href="http://www.emacswiki.org/emacs/EmacsClient">emacsclient</a>. Setting
my local <code>$EDITOR</code> to emacsclient means that I could, for example, run <code>git
commit</code> in a terminal and edit the commit message without having to spawn a
<em>new</em> emacs instance. Instead, emacsclient tells the existing emacs what files
to edit, and waits until emacs says it&rsquo;s done with them.</p>

<p>Until just yesterday, there was a major flaw in my setup: I couldn&rsquo;t activate
my local emacs instance through emacsclient on a remote host. This meant that
<code>$EDITOR</code> had to be set to something that spawned an editor on the remote host,
which was becoming increasingly frustrating.</p>

<!-- more -->


<p>In the past I&rsquo;d tried doing things like using an ssh tunnel to forward the
emacsclient connections from the remote host to my local machine, but
emacsclient doesn&rsquo;t anticipate this case. The emacsclient protocol is very
simple: ASCII commands delimited with line feeds. So, for example:</p>

<p>```
$ emacsclient /foo/bar</p>

<h1>and this sends (approximately):</h1>

<p>-auth some-gunk-here
-dir /foo -file /foo/bar
```</p>

<p>The problem is that this is being sent to your <em>local</em> emacs, which then tries
to load the <em>local</em> <code>/foo/bar</code>. A TRAMP path is in the form of (approximately)
<code>/ssh:example.com:/foo/bar</code>, so if only this could be prepended, emacs could
deal with it!</p>

<p>In my most recent investigation of the problem, I found <a href="http://snarfed.org/emacsclient_in_tramp_remote_shells">Ryan Barrett&rsquo;s
implementation</a>, which was <em>most</em> of what I wanted. Except,</p>

<ol>
<li><p>It wasn&rsquo;t automatic. It&rsquo;s really convenient to be able to have TRAMP dump
the appropriate authentication file onto the server as soon as a connection
is made without having to connect using a special function.</p></li>
<li><p>It was relying on emacsclient sending a <code>-tty</code> argument in a specific
format, and then using the TRAMP prefix of the <em>current buffer</em>. In practice
this means you have to have your frontmost buffer a file open on the remote
server, and <em>only then</em> can you use emacsclient on that remote server.</p></li>
</ol>


<p>I started to hack on it, but I was still affected by the same original problem:
emacsclient doesn&rsquo;t know about TRAMP. The default implementation doesn&rsquo;t even
have a way of specifying additional data to be sent over the wire. With the
simplicity of the emacsclient protocol, it started looking like writing my own
would be the simplest choice.</p>

<p>So, I put together some elisp to write out a special client authentication file
that would also include the TRAMP prefix and a shell script that would parse it
and write commands using nc. My elisp implementation borrows code from Ryan
Barrett&rsquo;s (and thank you for getting me started with this!) but goes a bit
farther. The full workflow is like this:</p>

<ol>
<li><p>Update your <code>.emacs</code> to load and configure the elisp.</p></li>
<li><p>Update your <code>.profile</code> to set <code>$EDITOR</code> to the <code>emacsclient.sh</code> script and
tell it where the authentication file is.</p></li>
<li><p>Open a TRAMP connection from your local emacs to write out the
authentication file.</p></li>
<li><p>Go hog wild.</p></li>
<li><p>Repeat only steps 3-5.</p></li>
</ol>


<p>Here are the versions of <code>emacsclient.sh</code> and <code>remote-emacsclient.el</code> as of
2013-06-25:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (emacsclient.sh)</span> <a href='/downloads/code/remote-emacsclient/emacsclient.sh'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">nowait</span><span class="o">=</span>0
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$1&quot;</span> <span class="o">=</span> <span class="s2">&quot;-n&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nv">nowait</span><span class="o">=</span>1
</span><span class='line'>    <span class="nb">shift</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$#&quot;</span> -eq 0 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;no files specified&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>0
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span> -e <span class="s2">&quot;$remote_emacs_auth&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nv">client_host</span><span class="o">=</span><span class="k">$(</span>sed -n 1p <span class="s2">&quot;$remote_emacs_auth&quot;</span><span class="k">)</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$client_host&quot;</span> <span class="o">]</span> <span class="o">||</span> ! nc -z <span class="nv">$client_host</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;no emacs server&quot;</span>
</span><span class='line'>    sleep 1
</span><span class='line'>    <span class="nb">exec </span>emacs <span class="s2">&quot;$@&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'>quote <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    sed <span class="s1">&#39;s:&amp;:\&amp;\&amp;:g;s:-:\&amp;-:g;s: :\&amp;_:g&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>quoteline <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nb">printf</span> <span class="s2">&quot;%s\n&quot;</span> <span class="s2">&quot;$1&quot;</span> | quote
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>unquote <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    sed <span class="s1">&#39;s:&amp;&amp;:\&amp;:g;s:&amp;-:-:g;s:&amp;_: :g;s:&amp;n:\</span>
</span><span class='line'><span class="s1">:g&#39;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nv">client_auth</span><span class="o">=</span><span class="k">$(</span>sed -n 2p <span class="s2">&quot;${remote_emacs_auth}&quot;</span><span class="k">)</span>
</span><span class='line'><span class="nv">tramp_prefix</span><span class="o">=</span><span class="k">$(</span>sed -n 3p <span class="s2">&quot;${remote_emacs_auth}&quot;</span><span class="k">)</span>
</span><span class='line'><span class="nv">args</span><span class="o">=</span><span class="k">$(</span><span class="nb">printf</span> <span class="s2">&quot;%s\n%s\n&quot;</span> <span class="s2">&quot;${client_auth}&quot;</span> <span class="s2">&quot;-dir ${tramp_prefix}${quoted_pwd}&quot;</span><span class="k">)</span>
</span><span class='line'><span class="o">[</span> <span class="s2">&quot;${nowait}&quot;</span> !<span class="o">=</span> 0 <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nv">args</span><span class="o">=</span><span class="s2">&quot;${args} -nowait&quot;</span>
</span><span class='line'><span class="nv">quoted_pwd</span><span class="o">=</span><span class="k">$(</span>quoteline <span class="s2">&quot;$(pwd)&quot;</span><span class="k">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for </span>file; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">quoted_file</span><span class="o">=</span><span class="k">$(</span>quoteline <span class="s2">&quot;${file}&quot;</span><span class="k">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="s2">&quot;${file}&quot;</span> in
</span><span class='line'>        +*<span class="o">)</span> <span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;-position ${quoted_file}&quot;</span>;;
</span><span class='line'>        /*<span class="o">)</span> <span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;-file ${tramp_prefix}${quoted_file}&quot;</span>;;
</span><span class='line'>        *<span class="o">)</span>  <span class="nv">argument</span><span class="o">=</span><span class="s2">&quot;-file ${tramp_prefix}${quoted_pwd}/${quoted_file}&quot;</span>;;
</span><span class='line'>    <span class="k">esac</span>
</span><span class='line'><span class="k">    </span><span class="nv">args</span><span class="o">=</span><span class="s2">&quot;${args} ${argument}&quot;</span>
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="nb">printf</span> <span class="s2">&quot;%s\n&quot;</span> <span class="s2">&quot;${args}&quot;</span> | nc <span class="nv">$client_host</span> | unquote
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (remote-emacsclient.el)</span> <a href='/downloads/code/remote-emacsclient/remote-emacsclient.el'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;tramp</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;tramp-sh</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">server-use-tcp</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">server-start</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">put-alist</span> <span class="p">(</span><span class="nv">key</span> <span class="nv">value</span> <span class="nv">alist</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Set cdr of an element (KEY . ...) in ALIST to VALUE and return ALIST.</span>
</span><span class='line'><span class="s">If there is no such element, create a new pair (KEY . VALUE) and</span>
</span><span class='line'><span class="s">return a new alist whose car is the new pair and cdr is ALIST.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">elm</span> <span class="p">(</span><span class="nb">assoc</span> <span class="nv">key</span> <span class="nv">alist</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if</span> <span class="nv">elm</span>
</span><span class='line'>        <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">setcdr</span> <span class="nv">elm</span> <span class="nv">value</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">alist</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">cons</span> <span class="p">(</span><span class="nb">cons</span> <span class="nv">key</span> <span class="nv">value</span><span class="p">)</span> <span class="nv">alist</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">update-tramp-emacs-server-port-forward</span> <span class="p">(</span><span class="nv">method-name</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Update the specified TRAMP&#39;s method to forward the Emacs</span>
</span><span class='line'><span class="s"> server port to the local host. This lets emacsclient on the</span>
</span><span class='line'><span class="s"> remote host open files in the local Emacs server.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let*</span> <span class="p">((</span><span class="nc">method</span> <span class="p">(</span><span class="nb">assoc</span> <span class="nv">method-name</span> <span class="nv">tramp-methods</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nv">ssh-args</span> <span class="p">(</span><span class="nb">cadr</span> <span class="p">(</span><span class="nb">assoc</span> <span class="ss">&#39;tramp-login-args</span> <span class="nc">method</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">put-alist</span> <span class="ss">&#39;tramp-login-args</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nv">put-alist</span> <span class="s">&quot;-R&quot;</span> <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">port</span>
</span><span class='line'>                                   <span class="p">(</span><span class="nv">process-contact</span> <span class="nv">server-process</span> <span class="ss">:service</span><span class="p">)))</span>
</span><span class='line'>        <span class="c1">;; put-alist makes a dotted pair for the key/value, but tramp-methods</span>
</span><span class='line'>        <span class="c1">;; needs a normal list, so put the value inside a list so that the</span>
</span><span class='line'>        <span class="c1">;; second part of the dotted pair (ie the cdr) is a list, which</span>
</span><span class='line'>        <span class="c1">;; converts it from a dotted pair into a normal list.</span>
</span><span class='line'>                              <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;%s:127.0.0.1:%s&quot;</span> <span class="nv">port</span> <span class="nv">port</span><span class="p">)))</span>
</span><span class='line'>                       <span class="nv">ssh-args</span><span class="p">))</span>
</span><span class='line'>      <span class="nc">method</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">tramp-make-tramp-file-name-from-vec</span> <span class="p">(</span><span class="nv">vec</span> <span class="nv">file</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Convenience function for making a TRAMP path, since this</span>
</span><span class='line'><span class="s">apparently didn&#39;t already exist.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">tramp-make-tramp-file-name</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">tramp-file-name-method</span> <span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">tramp-file-name-user</span> <span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">tramp-file-name-host</span> <span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">file</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">defcustom</span> <span class="nv">tramp-default-remote-emacsclient-auth-file</span>
</span><span class='line'>  <span class="s">&quot;~/.emacs.d/remote-server&quot;</span>
</span><span class='line'>  <span class="s">&quot;Default remote path at which to save the remote emacsclient</span>
</span><span class='line'><span class="s">authentication file. This can be a string or nil to disable</span>
</span><span class='line'><span class="s">saving an authentication file.</span>
</span><span class='line'>
</span><span class='line'><span class="s">The authentication file is similar to the one written out by the</span>
</span><span class='line'><span class="s">emacsclient TCP server, except it includes the prefix used for</span>
</span><span class='line'><span class="s">the TRAMP connection to the remote server.&quot;</span>
</span><span class='line'>  <span class="ss">:group</span> <span class="ss">&#39;tramp</span>
</span><span class='line'>  <span class="ss">:type</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">choice</span> <span class="p">(</span><span class="nv">const</span> <span class="no">nil</span><span class="p">)</span> <span class="nb">string</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">defcustom</span> <span class="nv">tramp-remote-emacsclient-auth-file-alist</span> <span class="no">nil</span>
</span><span class='line'>  <span class="s">&quot;The remote emacsclient authentication file path to use for</span>
</span><span class='line'><span class="s">specific host/user pairs. This is an alist of items (HOST USER</span>
</span><span class='line'><span class="s">PATH). The first matching item specifies the path to use for a</span>
</span><span class='line'><span class="s">connection which does not specify a method. HOST and USER are</span>
</span><span class='line'><span class="s">regular expressions or nil, which is interpreted as a regular</span>
</span><span class='line'><span class="s">expression which always matches. If no entry matches, the</span>
</span><span class='line'><span class="s">variable `tramp-default-remote-emacsclient-auth-file&#39; takes</span>
</span><span class='line'><span class="s">effect.</span>
</span><span class='line'>
</span><span class='line'><span class="s">If the connection does not specify the user, lookup is done using</span>
</span><span class='line'><span class="s">the empty string for the user name.</span>
</span><span class='line'>
</span><span class='line'><span class="s">See `tramp-default-remote-emacsclient-auth-file&#39; for an</span>
</span><span class='line'><span class="s">explanation of the auth file path.&quot;</span>
</span><span class='line'>  <span class="ss">:group</span> <span class="ss">&#39;tramp</span>
</span><span class='line'>  <span class="ss">:type</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">repeat</span> <span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="nv">choice</span> <span class="ss">:tag</span> <span class="s">&quot;Host regexp&quot;</span> <span class="nv">regexp</span> <span class="p">(</span><span class="nv">const</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>		       <span class="p">(</span><span class="nv">choice</span> <span class="ss">:tag</span> <span class="s">&quot;User regexp&quot;</span> <span class="nv">regexp</span> <span class="p">(</span><span class="nv">const</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>		       <span class="p">(</span><span class="nv">choice</span> <span class="ss">:tag</span> <span class="s">&quot;emacsclient auth path&quot;</span> <span class="nb">string</span> <span class="p">(</span><span class="nv">const</span> <span class="no">nil</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">tramp-get-remote-emacsclient-auth-file</span> <span class="p">(</span><span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Determine the full TRAMP path for the remote emacsclient</span>
</span><span class='line'><span class="s">authentication file, given a connection vector.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span>
</span><span class='line'>      <span class="p">((</span><span class="nv">auth-file</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">choices</span> <span class="nv">tramp-remote-emacsclient-auth-file-alist</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">host</span> <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nv">tramp-file-name-host</span> <span class="nv">vec</span><span class="p">)</span> <span class="s">&quot;&quot;</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">user</span> <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nv">tramp-file-name-user</span> <span class="nv">vec</span><span class="p">)</span> <span class="s">&quot;&quot;</span><span class="p">))</span>
</span><span class='line'>              <span class="nv">lfile</span> <span class="nv">item</span> <span class="nv">matched</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">while</span> <span class="nv">choices</span>
</span><span class='line'>            <span class="p">(</span><span class="k">setq</span> <span class="nv">item</span> <span class="p">(</span><span class="nb">pop</span> <span class="nv">choices</span><span class="p">))</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">and</span> <span class="p">(</span><span class="nv">string-match</span> <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">nth</span> <span class="mi">0</span> <span class="nv">item</span><span class="p">)</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="nv">host</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="nv">string-match</span> <span class="p">(</span><span class="nb">or</span> <span class="p">(</span><span class="nb">nth</span> <span class="mi">1</span> <span class="nv">item</span><span class="p">)</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="nv">user</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="k">setq</span> <span class="nv">lfile</span> <span class="p">(</span><span class="nb">nth</span> <span class="mi">2</span> <span class="nv">item</span><span class="p">)</span>
</span><span class='line'>                    <span class="nv">choices</span> <span class="no">nil</span>
</span><span class='line'>                    <span class="nv">matched</span> <span class="no">t</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="k">if</span> <span class="nv">matched</span> <span class="nv">lfile</span> <span class="nv">tramp-default-remote-emacsclient-auth-file</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if</span> <span class="nv">auth-file</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">tramp-make-tramp-file-name-from-vec</span> <span class="nv">vec</span> <span class="nv">auth-file</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">tramp-save-remote-emacsclient-auth-file</span> <span class="p">(</span><span class="k">&amp;optional</span> <span class="nv">vec</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Write the remote emacsclient authentication file for a given</span>
</span><span class='line'><span class="s">connection buffer, or, if used interactively, for the TRAMP</span>
</span><span class='line'><span class="s">connection of the current buffer.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">vec</span> <span class="p">(</span><span class="nb">or</span> <span class="nv">vec</span> <span class="p">(</span><span class="nv">tramp-dissect-file-name</span> <span class="nv">default-directory</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">condition-case</span> <span class="nv">err</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">auth-file</span> <span class="p">(</span><span class="nv">tramp-get-remote-emacsclient-auth-file</span> <span class="nv">vec</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">server</span> <span class="p">(</span><span class="nv">process-contact</span> <span class="nv">server-process</span> <span class="ss">:local</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="k">if</span> <span class="nv">auth-file</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">with-temp-file</span> <span class="nv">auth-file</span>
</span><span class='line'>                <span class="p">(</span><span class="nv">insert</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;127.0.0.1 %d\n&quot;</span> <span class="p">(</span><span class="nb">elt</span> <span class="nv">server</span> <span class="p">(</span><span class="nb">-</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">server</span><span class="p">)</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;-auth %s\n&quot;</span> <span class="p">(</span><span class="nv">process-get</span> <span class="nv">server-process</span> <span class="ss">:auth-key</span><span class="p">))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nv">server-quote-arg</span> <span class="p">(</span><span class="nv">tramp-make-tramp-file-name-from-vec</span> <span class="nv">vec</span> <span class="s">&quot;&quot;</span><span class="p">))</span>
</span><span class='line'>                 <span class="s">&quot;\n&quot;</span><span class="p">))</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">called-interactively-p</span> <span class="ss">&#39;any</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;No remote emacsclient auth file for %s&quot;</span>
</span><span class='line'>                       <span class="nv">default-directory</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="kt">file-error</span> <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;error saving remote emacsclient auth: %s&quot;</span> <span class="nv">err</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">defadvice</span> <span class="nv">tramp-open-connection-setup-interactive-shell</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">after</span> <span class="nv">copy-server-file-by-tramp</span> <span class="p">(</span><span class="nv">proc</span> <span class="nv">vec</span><span class="p">)</span> <span class="nv">activate</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Automatically write out a remote emacsclient auth file after a</span>
</span><span class='line'><span class="s">successful connection.&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">tramp-save-remote-emacsclient-auth-file</span> <span class="nv">vec</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">provide</span> <span class="ss">&#39;remote-emacsclient</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The most up-to-date versions of each will be in <a href="https://github.com/habnabit/dotfiles">my dotfiles repository</a>. For
convenience, here are links to the files within the repository:
<a href="https://github.com/habnabit/dotfiles/blob/master/emacsclient.sh">emacsclient.sh</a> and <a href="https://github.com/habnabit/dotfiles/blob/master/emacs.d/remote-emacsclient.el">remote-emacsclient.el</a>.</p>

<p>Configuration is pretty straightforward. In my local <code>.emacs</code> file,
<code>(server-start)</code> got changed to:</p>

<p><code>common-lisp
(require 'remote-emacsclient)
(update-tramp-emacs-server-port-forward tramp-default-method)
</code></p>

<p>The <code>update-tramp-emacs-server-port-forward</code> function takes a <a href="http://www.gnu.org/software/emacs/manual/html_node/tramp/External-methods.html">TRAMP method</a>
and updates the ssh arguments to that method to include a <code>-R</code> flag forwarding
remote TCP connections to the local server. It&rsquo;s probably not necessary to call
it for any TRAMP method other than your default.</p>

<p>By default <em>every</em> new server connection will leave an authentication file.
This can be tuned with the <code>tramp-default-remote-emacsclient-auth-file</code> and
<code>tramp-remote-emacsclient-auth-file-alist</code> variables. The former can be set to
<code>nil</code> to disable auth file creation by default. The latter is in the same form
as the <code>tramp-default-method-alist</code> variable for specifying the location of the
auth file by host and/or by user.</p>

<p>And in my <code>.zshrc</code>:</p>

<p><code>sh
: ${remote_emacs_auth:="$HOME/.emacs.d/remote-server"}; export remote_emacs_auth
export EDITOR="$HOME/.dotfiles/emacsclient.sh"
alias emacs="$HOME/.dotfiles/emacsclient.sh -n"
</code></p>

<p><code>$remote_emacs_auth</code>&rsquo;s default mirrors <code>remote-emacsclient.el</code>&rsquo;s default of
writing the auth file to <code>~/.emacs.d/remote-server</code>. Since <code>emacsclient.sh</code> is
(for me, by default) checked out in <code>~/.dotfiles</code> and set executable, this is
all that&rsquo;s required to use it as an editor. As an added bonus, the <code>emacs</code>
alias lets me type <code>emacs somefile</code> over ssh to open <code>somefile</code> in my local
emacs.</p>

<p>There&rsquo;s only two caveats (that I&rsquo;m aware of (I&rsquo;ve only tried the <code>scp</code>, <code>ssh</code>,
and <code>scpc</code> tramp methods with this so far)):</p>

<ol>
<li><p>Since the authentication key changes every time emacs is started, you <em>must</em>
open a new tramp connection to a server before emacsclient will be able to
speak to your local emacs. I haven&rsquo;t found a good solution to this other
than forcing the authentication key to always be the same (bad) or making
emacs reconnect to everything whenever you start it (worse).</p></li>
<li><p>There&rsquo;s no detection of when the server is restarted. Restarting the server
in a running emacs <em>also</em> changes the authentication key. Making a new tramp
connection isn&rsquo;t required in this case; there&rsquo;s a
<code>tramp-save-remote-emacsclient-auth-file</code> function that can be run
interactively. Running it will write a new auth file for the connection
corresponding to the current buffer.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
